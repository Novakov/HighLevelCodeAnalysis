<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="System.Reflection.Emit" #>
<#@ output extension=".cs" #>
using System;
using System.Collections.Generic;
using System.Reflection.Emit;
using Mono.Reflection;

namespace CodeModel.FlowAnalysis
{
	public partial class InstructionVisitor<TState>
	{
		<# foreach (var opcode in typeof (OpCodes).GetFields(BindingFlags.Public | BindingFlags.Static)){
		#>protected virtual TState Handle<#=opcode.Name#>(TState state, Instruction instruction)
		{
			return this.HandleUnrecognized(state, instruction);
		}

		<#}
		#>
		
		protected virtual void RegisterHandlers(Dictionary<OpCode, Func<TState, Instruction, TState>> registry)
		{
		<# foreach (var opcode in typeof (OpCodes).GetFields(BindingFlags.Public | BindingFlags.Static)){
		#>	registry[OpCodes.<#=opcode.Name#>] = Handle<#=opcode.Name#>;
		<#}#>				
		}		
	}
}